#ifndef MATRICECARREE_HPP
#define MATRICECARREE_HPP
#include <iostream>
#include <stdlib.h>

#include "Matrice.h"

class MatriceCarree:public Matrice
{
    public:
        
        // Redefinition des constructeurs :
            MatriceCarree(); // constructeur vide
            MatriceCarree( int const & n); // constructeur qui alloue et remplis avec l'identitée
            MatriceCarree( int const & n, double const & x); // constructeur qui remplis de x.
            MatriceCarree( MatriceCarree const& matrice); // constructeur par copie
            MatriceCarree( Matrice const& m); // constructeur qui promeut une matrice en matrice caréé.
            virtual ~MatriceCarree();            

        // Inversibilitée, inversion :
            bool inversible() const;
            MatriceCarree inverse() const;

        // Symetrique, définie-positive ( tests )
            bool symetrique() const;
            bool positive() const;
        
        // Determinant :
            double det() const;
protected:



};
#endif
#ifndef MATRICE_HPP
class Matrice
{
        // methodes non-valables pour les matrices non carée, mais utiles en virtual pour le polymorphisme
            //En effet, si les méthode de la classe matricecarée ne sont pas définie ici en virtual, le tableau deointeurs indférienciés
            // sur des matrices ou des matricecaréé contiendra des matricecarrée n'ayant pas acces a ces méthodes. 
            // En contrepartie, il faudra coder ces méthodes pour la classe matrice, et leur faire renvoyer une erreur.

            // Inversibilitée, inversion :
                virtual bool inversible() const;
                virtual MatriceCaree inverse() const;

            // Symetrique, définie-positive ( tests )
                virtual bool symetrique() const;
                virtual bool positive() const;
        
            // Determinant :
                virtual double det() const;
};
#endif
